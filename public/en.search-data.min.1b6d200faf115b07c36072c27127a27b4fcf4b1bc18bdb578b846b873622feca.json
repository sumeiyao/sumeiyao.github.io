[{"id":0,"href":"/posts/first-blog/","title":"A quick way to build academic personal website","section":"Blog","content":"Hello everyone, I finally and luckly spent a day to get my personal website set up and I\u0026rsquo;m ready to share my experience with those who need it.\nBasic Concepts and Tool Preparation\nGitHub Pages: Provides hosting for static web pages.\nHugo: Converts Markdown text into HTML files. The benefit is that you can easily modify code using a Markdown editor without needing to deal directly with complex HTML.\nInstallation: It\u0026rsquo;s recommended to install Hugo using brew.\nbrew install hugo # install hugo in your terminal which hugo #check install location hugo version #check the hugo version Downloading a Theme\nCreate a new Hugo web folder. In the terminal, use hugo new site \u0026lt;yourdfilename\u0026gt;. Navigate to the themes folder in your terminal and download your desired theme. Visit https://themes.gohugo.io/ to find a suitable template, then follow the installation instructions provided in the theme\u0026rsquo;s documentation. If the theme files appear in the themes folder, the download was successful. These files typically include: archetypes: Templates for Markdown files created using the hugo command. content: Holds content pages like blogs, book notes, etc. layouts: Defines the site\u0026rsquo;s styles; styles written here will override those in the theme\u0026rsquo;s layouts folder. static: Stores all static files, such as images. data: Contains additional data used by Hugo during site creation. public: Holds the static web pages generated by Hugo. config.toml: Website configuration file. Modifying the Theme Template\nNow, run hugo server in the terminal. You\u0026rsquo;ll see a URL; open it. This allows you to see real-time changes to your code affecting the webpage, which is really cool. Start by opening and examining the template files in your downloaded theme folder to see how examples are set up. Next, you can edit the config.yml file to set up the navigation bar. Navigation bar content is typically created in Markdown format within the content folder. In config.yml, two important parameters are menu: main:identifier and menu: main:weight, which respectively match identifiers in Markdown files and control the order of navigation tabs. Pushing Code to Source Repository\nCreate a new repository named \u0026lt;yourusername\u0026gt;.github.io and select to generate a README file.\nUse hugo in the terminal to convert Markdown to HTML, which will automatically create a public folder to store these files.\nFinally, use Git commands to push your code.\ngit init -b main #initialization git git remote add origin \u0026lt;your repository link\u0026gt; # connect with remote repository git pull --rebase origin main # git add . #add all changes git commit -m \u0026#34; your revison information such as frist submit\u0026#34; # submit git push origin main #push you code After a short wait, your personal website will be live.\n5.Pushing Code to Source Repository\nIf you have a new change, such as adding a new blog, adding a new paper, you can use git to submit the change, the steps are as follows:\ncd /your hugo project address\nhugo new posts/my-first-post.md #在post文件夹新建自命名的md文件\nChange draft to false in md article, before publishing #在md文件中更改参数\nView edit changes using hugo server #\nSubmit and push to github\ngit add . git commit -m \u0026#34;Added my first blog post\u0026#34; git push origin main However, these only covers the basics. For more complex websites, such as adding comment sections or automatically fetching new published paper records, further exploration will be needed.\n"}]